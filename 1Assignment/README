Question 1.1

In the first line, we create an int pointer that points to block 3 in memory.
Note that this generates a compile warning because we are implicitly converting
from an int to an int pointer. 
In the next line, we set the data that a points to to be 2 more than whatever
it points to originally. Then, it prints this value. 
If we really want to just print the integer 5, we could just do
printf("%d\n", 5);
If we want to follow the docstring verbatim, we should instead write:
void test1() {
    int *a;
    int b = 3;
    a = &b;
    *a += 2;
    printf("%d\n", *a);
}

Also, we need to remember to #include stdio in order to have printf.
We could also use malloc as in the next problem. However, then we have to 
free the allocated memory. 

void test1() {
    int *a;
    a = (int *) malloc(sizeof (int));
    if (!(a)) {
        printf("Out of memory\n");
        exit(-1);
    }
    *a = 3;
    *a += 2;
    printf("%d\n", *a);
}

Question 1.2

Firstly, a is an integer pointer, but b is an integer. Thus, we can use
void test2() {
    int *a, *b;
    a = (int *) malloc(sizeof (int));
    b = (int *) malloc(sizeof (int));

    if (!(a && b)) {
        printf("Out of memory\n");
        exit(-1);
    }
    *a = 2;
    *b = 3;
}

Note that we will eventually need to free the allocated memory.

Question 1.3

The problem is that we do not malloc enough memory for one thousand integers.
We need to malloc(1000* sizeof(int)) instead. 

Question 1.4

That does not create a two dimensional array of size 3x100. Note that sizeof(int *)
is the same as the size of an int because it is a pointer. 
We could create a large one dimensional array and fill it. Alternatively, we can
use multiple mallocs to handle it.

void test4() {
    int **a = (int **) malloc(3*sizeof(int *))
    if (!(a)) 
    {
        printf("Out of memory\n");
        exit(-1);
    }
    int i;
    for(i = 0; i < 3; i ++)
    {
    	a[i] = (int *) malloc(100 * sizeof(int));
    	if (!(a[i])) 
    	{
        	printf("Out of memory\n");
        	exit(-1);
        }
    }
    a[1][1] = 5;
}

Question 1.5

This is a problem because if the memory allocation fails, then a will be a NULL pointer
and we will print that the value is zero. We first need to check that the pointer
is allocated correctly and exit correctly. This is also a problem because we don't
print that the value is zero when it is.
To fix this, we can use

void test5() {
    int *a = (int *) malloc(sizeof (int));
    if (!(a)) 
    {
        printf("Out of memory\n");
        exit(-1);
    }
    scanf("%d", a);
    if (*a == 0)
        printf("Value is 0\n");
}

Question 2.1

The equation for y1 is going to be easier on the GPU than y2 because it is more
easily parallelizeable. y2 is computed using a recursive process which means that 
we need to compute each successive value serially. y1 is computed from some known
signal x, and therefore we can work copmuted as many y1s at once as the GPU has
cores.

Question 2.2

Based on the hint, we assume the 1-c is close enough to 0 that we can consider 
them to be equal.
y[n] = c * x[n] + 0 * y[n-1] = c * x[n].
This is much more parallelizeable because because we have no serial dependence 
on previous values of y. We are once again bound by cores and not by previous
calculations.