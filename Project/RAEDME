Installation

This project uses the DieHarder test suite. It can be installed via synaptic
with dieharder, or via apt-get install dieharder on debian based installations
of Linux.

We assume that python 2.7 is installed and the paths set up correctly.
In addition, we assume that the standard C++11 libraries are installed.

To run the demo, use "python make.py". It will take care of compiling,
running the RNGs, and testing the RNGs with dieharder. This will take a 
very long time because the dieharder suite is so comprehensive.
I recommend running overnight, or looking at what test I've noted will pass.

What the Program Does

There are three pieces of code that are in the CPU demo.
make.py:       compilies cpu_main.cc, runs the resulting executable, and 
               runs tests.py
cpu_main.cc:   runs the different RNGs and saves the output in text files
tests.py:      runs the dieharder test suite on the text files.

Expected Results

The results of individual tests are mentioned in tests.py.
The actual results of running them are saved in text files. Those files may not 
be complete for this demo because of how long it takes to run the tests.

In terms of running the RNGs, we also see expected results

kyle@KGaRD ~/Documents/junior/Spring/179 CS/CS179/Project $ ./a.out 1000000
Writing 1000000 equal floats to constant_rng.txt
That took 0.04134seconds.
Writing floats from the builtin uniform real distribution to builtin_rng.txt
That took 0.19569seconds.
Writing ints via the LCG a=1075731923,c=732971908,m=2^31-1,x_0=7to LCG_rng.txt
That took 0.210005seconds.
Writing ints via my rng with k=19,y_0=7to MY_rng.txt
That took 0.529319seconds.
Writing ints via xor-shifting rng with z_0=11, multiplier of 4294867297, and shifts 13,30, and 19 to XOR_rng.txt
That took 0.128799seconds.

Writing a constant value everywhere is clearly the fastest.
This is followed by using the builtin c++ random function which is likely implemented
with optimized assembly calls.
The xor-shifting is the faster than the builtin in this case, but on other runs it has been slower.
Since all it does it shift, and xor, which are bit operations it runs very quickly.
The LCG requires multiplcation, addition, and modular arithmatic, which are not 
all done with fast bit shifts.
My RNG is the slowest because it requires calls to sine, whiuch is likely written using
an infinite sequence approximation, or a taylor expansion, both of which are expensive.
However, My RNG does pass more tests than the LCG, so it is a valid tradeoff.


Analysis of Preformance

The quality of resulsts is as expected. The xorshift passes more tests than
my rng, which passes more tests than the LCG.
See test_output.txt for the exact data values.

As mentioned above, we can see that in terms of time to compute
constant < xor/builtin < LCG < Mine

This means that xorshift is the clear winner because it passes more tests
and it is one of the fastest algorithms we used.
